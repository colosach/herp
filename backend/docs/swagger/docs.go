// Package swagger Code generated by swaggo/swag. DO NOT EDIT
package swagger

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "Hotel ERP API Support",
            "email": "support@herp.com"
        },
        "license": {
            "name": "MIT",
            "url": "https://opensource.org/licenses/MIT"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/v1/admin/login-history": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve login history for all users",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "Get login history",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Maximum number of logs to return (default 100, max 1000)",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/admin/roles": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a list of all roles in the system",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "List all roles",
                "responses": {
                    "200": {
                        "description": "List of roles",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new role in the system",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "Create a new role",
                "parameters": [
                    {
                        "description": "Role creation data",
                        "name": "role",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/auth.CreateRoleRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Role created successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/admin/roles/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get detailed information about a specific role",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "Get role by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Role ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Role details",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Role not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update role information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "Update role",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Role ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Role update data",
                        "name": "role",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/auth.UpdateRoleRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Role updated successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete a role from the system",
                "tags": [
                    "admin"
                ],
                "summary": "Delete role",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Role ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Role deleted successfully"
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/admin/roles/{id}/permission": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve permissions for a specific role",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "Get role permissions",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Role ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Add a permission to a specific role",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "Add permission to role",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Role ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Permission ID",
                        "name": "permission_id",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/auth.ManageRolePermissionRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Permission added to role"
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/admin/roles/{id}/permission/{permission_id}": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Remove a permission from a specific role",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "Remove permission from role",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Role ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Permission ID",
                        "name": "permission_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Permission removed from role"
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/admin/user/{id}/activity": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve activity logs for a specific user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "Get user activity logs",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Maximum number of logs to return (default 100, max 1000)",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/admin/users": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a list of all users in the system",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "List all users",
                "responses": {
                    "200": {
                        "description": "List of users",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "additionalProperties": true
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new user account with role assignment",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "Create a new user",
                "parameters": [
                    {
                        "description": "User creation data",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/auth.CreateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User created successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/admin/users/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get detailed information about a specific user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "Get user by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User details",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update user account information and settings",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "Update user information",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "User update data",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/auth.UpdateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User updated successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete a user account from the system",
                "tags": [
                    "admin"
                ],
                "summary": "Delete user",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "User deleted successfully"
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/admin/users/{id}/reset-password": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Reset password for a specific user",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "Reset user password",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "New password data",
                        "name": "password",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/auth.ResetPasswordRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Password reset successfully"
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/auth/forgot-password": {
            "post": {
                "description": "Initiate password reset by sending a reset code to the user's email",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Forgot Password",
                "parameters": [
                    {
                        "description": "Forgot Password Request",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/auth.ForgotPasswordRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Reset code sent to email"
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/auth.BadRequestResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/auth.UnauthorizedResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/auth.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/auth/login": {
            "post": {
                "description": "Authenticate user with email or username and return JWT token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "User login",
                "parameters": [
                    {
                        "description": "Login credentials (email or username)",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/auth.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Login successful",
                        "schema": {
                            "$ref": "#/definitions/auth.LoginResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/auth.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/auth.UnauthorizedResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/auth.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/auth/logout": {
            "post": {
                "description": "Logout user and invalidate JWT token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "User logout",
                "responses": {
                    "200": {
                        "description": "Logout successful"
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/auth.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/auth.UnauthorizedResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/auth.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/auth/refresh": {
            "post": {
                "description": "Refresh JWT token using a valid refresh token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Refresh JWT token",
                "parameters": [
                    {
                        "description": "Refresh token request",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/auth.RefreshRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Token refreshed successfully",
                        "schema": {
                            "$ref": "#/definitions/auth.RefreshResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/auth.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/auth.UnauthorizedResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/auth.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/auth/register": {
            "post": {
                "description": "Create user with email, username, password and return JWT token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "User Register",
                "parameters": [
                    {
                        "description": "Register credentials (email, username and password)",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/auth.RegisterAdminRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Registration successful",
                        "schema": {
                            "$ref": "#/definitions/auth.RegisterResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/auth.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/auth.UnauthorizedResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/auth.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/auth/reset-password": {
            "post": {
                "description": "Reset password using email, reset code, and new password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Reset Password",
                "parameters": [
                    {
                        "description": "Reset Password Request",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/auth.ResetAdminPasswordRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Password reset successful"
                    },
                    "400": {
                        "description": "Bad request or invalid code",
                        "schema": {
                            "$ref": "#/definitions/auth.BadRequestResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/auth.UnauthorizedResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/auth.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/auth/verify-email": {
            "post": {
                "description": "Verify admin email with email and code",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Verify Admin Email",
                "parameters": [
                    {
                        "description": "Verify Email Request",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/auth.VerifyEmailRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Email verified successfully"
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/auth.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/auth.UnauthorizedResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/auth.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/core/business": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new business",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "core"
                ],
                "summary": "Create business",
                "parameters": [
                    {
                        "description": "Business details",
                        "name": "business",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/core.CreateBusinessParams"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/core.CreateBusinessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/pos/items": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new inventory item",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "pos"
                ],
                "summary": "Create item",
                "parameters": [
                    {
                        "description": "Item details",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/pos.CreateItemRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Item created successfully",
                        "schema": {
                            "$ref": "#/definitions/pos.ItemResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/pos.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/pos.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/pos.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/pos.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/pos/sales": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new sale transaction",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "pos"
                ],
                "summary": "Create sale",
                "parameters": [
                    {
                        "description": "Sale details",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/pos.CreateSaleRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Sale created successfully",
                        "schema": {
                            "$ref": "#/definitions/pos.SaleResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/pos.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/pos.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/pos.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/pos.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/pos/sales/history": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get sales history with optional filters",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "pos"
                ],
                "summary": "Get sales history",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of items per page",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Start date (YYYY-MM-DD)",
                        "name": "start_date",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "End date (YYYY-MM-DD)",
                        "name": "end_date",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Sales history retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/pos.SalesHistoryResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/pos.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/pos.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/pos.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "auth.BadRequestResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "description": "Error message",
                    "type": "string",
                    "example": "Bad request"
                }
            }
        },
        "auth.CreateRoleRequest": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "auth.CreateUserRequest": {
            "type": "object",
            "required": [
                "email",
                "first_name",
                "gender",
                "is_active",
                "last_name",
                "password",
                "role_id",
                "username"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string",
                    "minLength": 2
                },
                "gender": {
                    "type": "string",
                    "enum": [
                        "male",
                        "female"
                    ]
                },
                "is_active": {
                    "type": "boolean"
                },
                "last_name": {
                    "type": "string",
                    "minLength": 2
                },
                "password": {
                    "type": "string",
                    "minLength": 4
                },
                "role_id": {
                    "type": "integer"
                },
                "username": {
                    "type": "string",
                    "minLength": 3
                }
            }
        },
        "auth.ForgotPasswordRequest": {
            "type": "object",
            "required": [
                "email"
            ],
            "properties": {
                "email": {
                    "description": "User email address",
                    "type": "string",
                    "example": "user@example.com"
                }
            }
        },
        "auth.InternalServerErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "description": "Error message",
                    "type": "string",
                    "example": "Internal server error"
                }
            }
        },
        "auth.LoginRequest": {
            "description": "Login request payload",
            "type": "object",
            "required": [
                "password"
            ],
            "properties": {
                "email": {
                    "description": "Email for authentication (optional if username provided)",
                    "type": "string",
                    "example": "admin@hotel.com"
                },
                "password": {
                    "description": "Password for authentication",
                    "type": "string",
                    "example": "password123"
                },
                "username": {
                    "description": "Username for authentication (optional if email provided)",
                    "type": "string",
                    "example": "admin"
                }
            }
        },
        "auth.LoginResponse": {
            "description": "Login response payload",
            "type": "object",
            "properties": {
                "expired_at": {
                    "description": "Token expiration timestamp in seconds",
                    "type": "integer",
                    "example": 1700000000
                },
                "refresh_token": {
                    "description": "JWT refresh token",
                    "type": "string",
                    "example": "dGhpcyBpcyBhIHJlZnJlc2ggdG9rZW4..."
                },
                "token": {
                    "description": "JWT authentication token",
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                }
            }
        },
        "auth.ManageRolePermissionRequest": {
            "type": "object",
            "required": [
                "permission_id"
            ],
            "properties": {
                "permission_id": {
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "auth.RefreshRequest": {
            "type": "object",
            "required": [
                "refreshToken"
            ],
            "properties": {
                "refreshToken": {
                    "description": "JWT refresh token",
                    "type": "string",
                    "example": "dGhpcyBpcyBhIHJlZnJlc2ggdG9rZW4..."
                }
            }
        },
        "auth.RefreshResponse": {
            "type": "object",
            "properties": {
                "accessToken": {
                    "description": "JWT authentication token",
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                },
                "expiresIn": {
                    "description": "Token expiration in seconds",
                    "type": "integer",
                    "example": 3600
                },
                "refreshToken": {
                    "description": "JWT refresh token",
                    "type": "string",
                    "example": "dGhpcyBpcyBhIHJlZnJlc2ggdG9rZW4..."
                }
            }
        },
        "auth.RegisterAdminRequest": {
            "description": "Register admin request payload",
            "type": "object",
            "required": [
                "email",
                "first_name",
                "last_name",
                "password",
                "username"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string",
                    "minLength": 2
                },
                "last_name": {
                    "type": "string",
                    "minLength": 2
                },
                "password": {
                    "type": "string",
                    "minLength": 8
                },
                "username": {
                    "type": "string",
                    "minLength": 3
                }
            }
        },
        "auth.RegisterResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string",
                    "example": "2021-01-01T00:00:00Z"
                },
                "email": {
                    "type": "string",
                    "example": "admin@hotel.com"
                },
                "first_name": {
                    "type": "string",
                    "example": "Admin"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "is_active": {
                    "type": "boolean",
                    "example": true
                },
                "is_email_verified": {
                    "type": "boolean",
                    "example": true
                },
                "last_name": {
                    "type": "string",
                    "example": "Admin"
                },
                "role_id": {
                    "type": "integer",
                    "example": 1
                },
                "updated_at": {
                    "type": "string",
                    "example": "2021-01-01T00:00:00Z"
                },
                "username": {
                    "type": "string",
                    "example": "admin"
                }
            }
        },
        "auth.ResetAdminPasswordRequest": {
            "type": "object",
            "required": [
                "code",
                "email",
                "new_password"
            ],
            "properties": {
                "code": {
                    "description": "Password reset code",
                    "type": "string",
                    "example": "1234567"
                },
                "email": {
                    "description": "Admin email address",
                    "type": "string",
                    "example": "admin@example.com"
                },
                "new_password": {
                    "type": "string",
                    "minLength": 8,
                    "example": "NewPassword123"
                }
            }
        },
        "auth.ResetPasswordRequest": {
            "type": "object",
            "required": [
                "new_password"
            ],
            "properties": {
                "new_password": {
                    "type": "string",
                    "minLength": 8
                }
            }
        },
        "auth.UnauthorizedResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "description": "Error message",
                    "type": "string",
                    "example": "Unauthorized"
                }
            }
        },
        "auth.UpdateRoleRequest": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "description": {
                    "type": "string",
                    "example": "Manages daily operations"
                },
                "name": {
                    "type": "string",
                    "example": "Manager"
                }
            }
        },
        "auth.UpdateUserRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "johndoe@email.com"
                },
                "first_name": {
                    "type": "string",
                    "minLength": 2,
                    "example": "John"
                },
                "gender": {
                    "type": "string",
                    "enum": [
                        "male",
                        "female"
                    ],
                    "example": "male"
                },
                "is_active": {
                    "type": "boolean",
                    "example": true
                },
                "last_name": {
                    "type": "string",
                    "minLength": 2,
                    "example": "Doe"
                },
                "role_id": {
                    "type": "integer",
                    "example": 2
                },
                "username": {
                    "type": "string",
                    "minLength": 3,
                    "example": "johndoe"
                }
            }
        },
        "auth.VerifyEmailRequest": {
            "description": "verify email request payload",
            "type": "object",
            "required": [
                "code",
                "email"
            ],
            "properties": {
                "code": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                }
            }
        },
        "core.CreateBusinessParams": {
            "type": "object",
            "required": [
                "address_one",
                "country",
                "name"
            ],
            "properties": {
                "addres_two": {
                    "type": "string",
                    "example": "2nd floor"
                },
                "address_one": {
                    "type": "string",
                    "example": "32 Ander avenue"
                },
                "allow_overselling": {
                    "type": "boolean",
                    "example": false
                },
                "city": {
                    "type": "string",
                    "example": "Aba"
                },
                "country": {
                    "type": "string",
                    "example": "Nigeria"
                },
                "currency": {
                    "type": "string",
                    "example": "NGN"
                },
                "email": {
                    "type": "string",
                    "example": "admin@palmwinexpress.com"
                },
                "font": {
                    "type": "string"
                },
                "language": {
                    "type": "string",
                    "example": "en"
                },
                "logo_url": {
                    "type": "string",
                    "example": "https://imgur.com/234343"
                },
                "low_stock_threshold": {
                    "type": "integer",
                    "example": 5
                },
                "motto": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "example": "Palmwineexpress hotels"
                },
                "payment_type": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "cash",
                        "pos",
                        "room_charge",
                        "transfer"
                    ]
                },
                "phone": {
                    "type": "string",
                    "example": "+2348123456789"
                },
                "primary_color": {
                    "type": "string"
                },
                "rounding": {
                    "type": "string",
                    "example": "nearest"
                },
                "state": {
                    "type": "string",
                    "example": "Abia"
                },
                "tax_id": {
                    "type": "string",
                    "example": "123456789"
                },
                "tax_rate": {
                    "type": "string",
                    "example": "12"
                },
                "timezone": {
                    "type": "string",
                    "example": "UTC +1"
                },
                "website": {
                    "type": "string",
                    "example": "https://palmwinexpress.com"
                },
                "zip_code": {
                    "type": "string",
                    "example": "23432"
                }
            }
        },
        "core.CreateBusinessResponse": {
            "type": "object",
            "required": [
                "address_one",
                "country",
                "name"
            ],
            "properties": {
                "addres_two": {
                    "type": "string",
                    "example": "2nd floor"
                },
                "address_one": {
                    "type": "string",
                    "example": "32 Ander avenue"
                },
                "allow_overselling": {
                    "type": "boolean",
                    "example": false
                },
                "city": {
                    "type": "string",
                    "example": "Aba"
                },
                "country": {
                    "type": "string",
                    "example": "Nigeria"
                },
                "currency": {
                    "type": "string",
                    "example": "NGN"
                },
                "email": {
                    "type": "string",
                    "example": "admin@palmwinexpress.com"
                },
                "font": {
                    "type": "string"
                },
                "language": {
                    "type": "string",
                    "example": "en"
                },
                "logo_url": {
                    "type": "string",
                    "example": "https://imgur.com/234343"
                },
                "low_stock_threshold": {
                    "type": "integer",
                    "example": 5
                },
                "motto": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "example": "Palmwineexpress hotels"
                },
                "payment_type": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "cash",
                        "pos",
                        "room_charge",
                        "transfer"
                    ]
                },
                "phone": {
                    "type": "string",
                    "example": "+2348123456789"
                },
                "primary_color": {
                    "type": "string"
                },
                "rounding": {
                    "type": "string",
                    "example": "nearest"
                },
                "state": {
                    "type": "string",
                    "example": "Abia"
                },
                "tax_id": {
                    "type": "string",
                    "example": "123456789"
                },
                "tax_rate": {
                    "type": "string",
                    "example": "12"
                },
                "timezone": {
                    "type": "string",
                    "example": "UTC +1"
                },
                "website": {
                    "type": "string",
                    "example": "https://palmwinexpress.com"
                },
                "zip_code": {
                    "type": "string",
                    "example": "23432"
                }
            }
        },
        "pos.CreateItemRequest": {
            "description": "Create item request payload",
            "type": "object",
            "required": [
                "category",
                "name",
                "price"
            ],
            "properties": {
                "category": {
                    "description": "Item category",
                    "type": "string",
                    "example": "Room Service"
                },
                "description": {
                    "description": "Item description",
                    "type": "string",
                    "example": "24-hour room service with premium menu"
                },
                "name": {
                    "description": "Item name",
                    "type": "string",
                    "example": "Deluxe Room Service"
                },
                "price": {
                    "description": "Item price",
                    "type": "number",
                    "example": 45.99
                },
                "sku": {
                    "description": "Item SKU",
                    "type": "string",
                    "example": "RS-DELUXE-001"
                },
                "stock_quantity": {
                    "description": "Stock quantity",
                    "type": "integer",
                    "example": 100
                }
            }
        },
        "pos.CreateSaleRequest": {
            "description": "Create sale request payload",
            "type": "object",
            "required": [
                "customer_id",
                "items"
            ],
            "properties": {
                "customer_id": {
                    "description": "Customer ID",
                    "type": "integer",
                    "example": 1
                },
                "discount": {
                    "description": "Discount amount",
                    "type": "number",
                    "example": 10.5
                },
                "items": {
                    "description": "List of items in the sale",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/pos.SaleItem"
                    }
                },
                "tax_rate": {
                    "description": "Tax rate percentage",
                    "type": "number",
                    "example": 8.25
                }
            }
        },
        "pos.ErrorResponse": {
            "description": "Error response payload",
            "type": "object",
            "properties": {
                "error": {
                    "description": "Error message",
                    "type": "string",
                    "example": "Invalid request"
                }
            }
        },
        "pos.ItemResponse": {
            "description": "Item response payload",
            "type": "object",
            "properties": {
                "category": {
                    "description": "Item category",
                    "type": "string",
                    "example": "Room Service"
                },
                "created_at": {
                    "description": "Item creation timestamp",
                    "type": "string",
                    "example": "2024-01-15T10:30:00Z"
                },
                "description": {
                    "description": "Item description",
                    "type": "string",
                    "example": "24-hour room service with premium menu"
                },
                "id": {
                    "description": "Item ID",
                    "type": "integer",
                    "example": 1
                },
                "name": {
                    "description": "Item name",
                    "type": "string",
                    "example": "Deluxe Room Service"
                },
                "price": {
                    "description": "Item price",
                    "type": "number",
                    "example": 45.99
                },
                "sku": {
                    "description": "Item SKU",
                    "type": "string",
                    "example": "RS-DELUXE-001"
                },
                "stock_quantity": {
                    "description": "Stock quantity",
                    "type": "integer",
                    "example": 100
                },
                "updated_at": {
                    "description": "Item last update timestamp",
                    "type": "string",
                    "example": "2024-01-15T10:30:00Z"
                }
            }
        },
        "pos.PaginationResponse": {
            "description": "Pagination response payload",
            "type": "object",
            "properties": {
                "limit": {
                    "description": "Number of items per page",
                    "type": "integer",
                    "example": 20
                },
                "page": {
                    "description": "Current page number",
                    "type": "integer",
                    "example": 1
                },
                "pages": {
                    "description": "Total number of pages",
                    "type": "integer",
                    "example": 5
                },
                "total": {
                    "description": "Total number of items",
                    "type": "integer",
                    "example": 100
                }
            }
        },
        "pos.SaleItem": {
            "description": "Sale item details",
            "type": "object",
            "required": [
                "item_id",
                "price",
                "quantity"
            ],
            "properties": {
                "item_id": {
                    "description": "Item ID",
                    "type": "integer",
                    "example": 1
                },
                "price": {
                    "description": "Price per unit",
                    "type": "number",
                    "example": 25.99
                },
                "quantity": {
                    "description": "Quantity of the item",
                    "type": "integer",
                    "example": 2
                }
            }
        },
        "pos.SaleResponse": {
            "description": "Sale response payload",
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "Sale creation timestamp",
                    "type": "string",
                    "example": "2024-01-15T10:30:00Z"
                },
                "customer_id": {
                    "description": "Customer ID",
                    "type": "integer",
                    "example": 1
                },
                "discount_amount": {
                    "description": "Discount amount",
                    "type": "number",
                    "example": 10.5
                },
                "id": {
                    "description": "Sale ID",
                    "type": "integer",
                    "example": 1
                },
                "items": {
                    "description": "List of items in the sale",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/pos.SaleItem"
                    }
                },
                "tax_amount": {
                    "description": "Tax amount",
                    "type": "number",
                    "example": 4.27
                },
                "total_amount": {
                    "description": "Total amount after tax and discount",
                    "type": "number",
                    "example": 56.23
                }
            }
        },
        "pos.SalesHistoryResponse": {
            "description": "Sales history response payload",
            "type": "object",
            "properties": {
                "pagination": {
                    "description": "Pagination information",
                    "allOf": [
                        {
                            "$ref": "#/definitions/pos.PaginationResponse"
                        }
                    ]
                },
                "sales": {
                    "description": "List of sales",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/pos.SaleResponse"
                    }
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "description": "JWT Authorization header using the Bearer scheme. Example: \"Authorization: Bearer {token}\"",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0.0",
	Host:             "localhost:7000",
	BasePath:         "/api",
	Schemes:          []string{},
	Title:            "Hotel ERP API",
	Description:      "This is the Hotel ERP API server. It provides endpoints for managing hotel operations including authentication, point of sale, inventory, and more.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
