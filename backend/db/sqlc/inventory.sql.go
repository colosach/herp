// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: inventory.sql

package db

import (
	"context"
	"database/sql"
)

const createBrand = `-- name: CreateBrand :one
INSERT INTO brand (name, description, logo)
VALUES ($1, $2, $3)
RETURNING id, name, description, logo, is_active, created_at, updated_at
`

type CreateBrandParams struct {
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
	Logo        sql.NullString `json:"logo"`
}

// Brand
func (q *Queries) CreateBrand(ctx context.Context, arg CreateBrandParams) (Brand, error) {
	row := q.db.QueryRowContext(ctx, createBrand, arg.Name, arg.Description, arg.Logo)
	var i Brand
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Logo,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createCategory = `-- name: CreateCategory :one
INSERT INTO category (name, parent_id, description)
VALUES ($1, $2, $3)
RETURNING id, name, parent_id, description, is_active, created_at, updated_at
`

type CreateCategoryParams struct {
	Name        string         `json:"name"`
	ParentID    sql.NullInt32  `json:"parent_id"`
	Description sql.NullString `json:"description"`
}

// Category
func (q *Queries) CreateCategory(ctx context.Context, arg CreateCategoryParams) (Category, error) {
	row := q.db.QueryRowContext(ctx, createCategory, arg.Name, arg.ParentID, arg.Description)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ParentID,
		&i.Description,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createColor = `-- name: CreateColor :one
INSERT INTO color (name)
VALUES ($1)
RETURNING id, name, created_at, updated_at
`

// Color
func (q *Queries) CreateColor(ctx context.Context, name string) (Color, error) {
	row := q.db.QueryRowContext(ctx, createColor, name)
	var i Color
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createItem = `-- name: CreateItem :one
INSERT INTO item (brand_id, category_id, name, description, item_type, no_variants)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, brand_id, category_id, name, description, item_type, is_active, no_variants, created_at, updated_at
`

type CreateItemParams struct {
	BrandID     sql.NullInt32  `json:"brand_id"`
	CategoryID  int32          `json:"category_id"`
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
	ItemType    string         `json:"item_type"`
	NoVariants  sql.NullBool   `json:"no_variants"`
}

// Item
func (q *Queries) CreateItem(ctx context.Context, arg CreateItemParams) (Item, error) {
	row := q.db.QueryRowContext(ctx, createItem,
		arg.BrandID,
		arg.CategoryID,
		arg.Name,
		arg.Description,
		arg.ItemType,
		arg.NoVariants,
	)
	var i Item
	err := row.Scan(
		&i.ID,
		&i.BrandID,
		&i.CategoryID,
		&i.Name,
		&i.Description,
		&i.ItemType,
		&i.IsActive,
		&i.NoVariants,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createItemImage = `-- name: CreateItemImage :one
INSERT INTO item_image (item_id, variation_id, url, is_primary)
VALUES ($1, $2, $3, $4)
RETURNING id, item_id, variation_id, url, is_primary, created_at
`

type CreateItemImageParams struct {
	ItemID      sql.NullInt32 `json:"item_id"`
	VariationID sql.NullInt32 `json:"variation_id"`
	Url         string        `json:"url"`
	IsPrimary   sql.NullBool  `json:"is_primary"`
}

// Image
func (q *Queries) CreateItemImage(ctx context.Context, arg CreateItemImageParams) (ItemImage, error) {
	row := q.db.QueryRowContext(ctx, createItemImage,
		arg.ItemID,
		arg.VariationID,
		arg.Url,
		arg.IsPrimary,
	)
	var i ItemImage
	err := row.Scan(
		&i.ID,
		&i.ItemID,
		&i.VariationID,
		&i.Url,
		&i.IsPrimary,
		&i.CreatedAt,
	)
	return i, err
}

const createUnit = `-- name: CreateUnit :one
INSERT INTO unit (name, short_code)
VALUES ($1, $2)
RETURNING id, name, short_code, created_at, updated_at
`

type CreateUnitParams struct {
	Name      string         `json:"name"`
	ShortCode sql.NullString `json:"short_code"`
}

// Units
func (q *Queries) CreateUnit(ctx context.Context, arg CreateUnitParams) (Unit, error) {
	row := q.db.QueryRowContext(ctx, createUnit, arg.Name, arg.ShortCode)
	var i Unit
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ShortCode,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createVariation = `-- name: CreateVariation :one
INSERT INTO variation (item_id, sku, name, unit_id, size, color_id, barcode, base_price, reorder_level, is_default)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
RETURNING id, item_id, sku, name, unit_id, size, color_id, barcode, base_price, reorder_level, is_default, is_active, created_at, updated_at
`

type CreateVariationParams struct {
	ItemID       int32          `json:"item_id"`
	Sku          string         `json:"sku"`
	Name         string         `json:"name"`
	UnitID       int32          `json:"unit_id"`
	Size         sql.NullString `json:"size"`
	ColorID      sql.NullInt32  `json:"color_id"`
	Barcode      sql.NullString `json:"barcode"`
	BasePrice    string         `json:"base_price"`
	ReorderLevel sql.NullInt32  `json:"reorder_level"`
	IsDefault    sql.NullBool   `json:"is_default"`
}

// Variation
func (q *Queries) CreateVariation(ctx context.Context, arg CreateVariationParams) (Variation, error) {
	row := q.db.QueryRowContext(ctx, createVariation,
		arg.ItemID,
		arg.Sku,
		arg.Name,
		arg.UnitID,
		arg.Size,
		arg.ColorID,
		arg.Barcode,
		arg.BasePrice,
		arg.ReorderLevel,
		arg.IsDefault,
	)
	var i Variation
	err := row.Scan(
		&i.ID,
		&i.ItemID,
		&i.Sku,
		&i.Name,
		&i.UnitID,
		&i.Size,
		&i.ColorID,
		&i.Barcode,
		&i.BasePrice,
		&i.ReorderLevel,
		&i.IsDefault,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteBrand = `-- name: DeleteBrand :exec
DELETE FROM brand WHERE id = $1
`

func (q *Queries) DeleteBrand(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteBrand, id)
	return err
}

const deleteCategory = `-- name: DeleteCategory :exec
DELETE FROM category WHERE id = $1
`

func (q *Queries) DeleteCategory(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteCategory, id)
	return err
}

const deleteColor = `-- name: DeleteColor :exec
DELETE FROM color
WHERE id = $1
RETURNING id, name, created_at, updated_at
`

func (q *Queries) DeleteColor(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteColor, id)
	return err
}

const deleteInventory = `-- name: DeleteInventory :exec
DELETE FROM inventory WHERE id = $1
`

func (q *Queries) DeleteInventory(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteInventory, id)
	return err
}

const deleteItem = `-- name: DeleteItem :exec
DELETE FROM item WHERE id = $1
`

func (q *Queries) DeleteItem(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteItem, id)
	return err
}

const deleteItemImage = `-- name: DeleteItemImage :exec
DELETE FROM item_image WHERE id = $1
`

func (q *Queries) DeleteItemImage(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteItemImage, id)
	return err
}

const deleteUnit = `-- name: DeleteUnit :exec
DELETE FROM unit
WHERE id = $1
RETURNING id, name, short_code, created_at, updated_at
`

func (q *Queries) DeleteUnit(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteUnit, id)
	return err
}

const deleteVariation = `-- name: DeleteVariation :exec
DELETE FROM variation WHERE id = $1
`

func (q *Queries) DeleteVariation(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteVariation, id)
	return err
}

const getBrand = `-- name: GetBrand :one
SELECT id, name, description, logo, is_active, created_at, updated_at FROM brand WHERE id = $1 LIMIT 1
`

func (q *Queries) GetBrand(ctx context.Context, id int32) (Brand, error) {
	row := q.db.QueryRowContext(ctx, getBrand, id)
	var i Brand
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Logo,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCategory = `-- name: GetCategory :one
SELECT id, name, parent_id, description, is_active, created_at, updated_at FROM category WHERE id = $1 LIMIT 1
`

func (q *Queries) GetCategory(ctx context.Context, id int32) (Category, error) {
	row := q.db.QueryRowContext(ctx, getCategory, id)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ParentID,
		&i.Description,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getColorByID = `-- name: GetColorByID :one
SELECT id, name, created_at, updated_at FROM color
WHERE id = $1
`

func (q *Queries) GetColorByID(ctx context.Context, id int32) (Color, error) {
	row := q.db.QueryRowContext(ctx, getColorByID, id)
	var i Color
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getColorByName = `-- name: GetColorByName :one
SELECT id, name, created_at, updated_at FROM color
WHERE name = $1
`

func (q *Queries) GetColorByName(ctx context.Context, name string) (Color, error) {
	row := q.db.QueryRowContext(ctx, getColorByName, name)
	var i Color
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getInventoryByStore = `-- name: GetInventoryByStore :many
SELECT id, store_id, variation_id, quantity, last_updated FROM inventory WHERE store_id = $1
`

func (q *Queries) GetInventoryByStore(ctx context.Context, storeID int32) ([]Inventory, error) {
	rows, err := q.db.QueryContext(ctx, getInventoryByStore, storeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Inventory{}
	for rows.Next() {
		var i Inventory
		if err := rows.Scan(
			&i.ID,
			&i.StoreID,
			&i.VariationID,
			&i.Quantity,
			&i.LastUpdated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getInventoryItem = `-- name: GetInventoryItem :one
SELECT id, store_id, variation_id, quantity, last_updated FROM inventory
WHERE store_id = $1 AND variation_id = $2
LIMIT 1
`

type GetInventoryItemParams struct {
	StoreID     int32 `json:"store_id"`
	VariationID int32 `json:"variation_id"`
}

func (q *Queries) GetInventoryItem(ctx context.Context, arg GetInventoryItemParams) (Inventory, error) {
	row := q.db.QueryRowContext(ctx, getInventoryItem, arg.StoreID, arg.VariationID)
	var i Inventory
	err := row.Scan(
		&i.ID,
		&i.StoreID,
		&i.VariationID,
		&i.Quantity,
		&i.LastUpdated,
	)
	return i, err
}

const getItem = `-- name: GetItem :one
SELECT id, brand_id, category_id, name, description, item_type, is_active, no_variants, created_at, updated_at FROM item WHERE id = $1 LIMIT 1
`

func (q *Queries) GetItem(ctx context.Context, id int32) (Item, error) {
	row := q.db.QueryRowContext(ctx, getItem, id)
	var i Item
	err := row.Scan(
		&i.ID,
		&i.BrandID,
		&i.CategoryID,
		&i.Name,
		&i.Description,
		&i.ItemType,
		&i.IsActive,
		&i.NoVariants,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getItemImagesByItem = `-- name: GetItemImagesByItem :many
SELECT id, item_id, variation_id, url, is_primary, created_at FROM item_image WHERE item_id = $1
`

func (q *Queries) GetItemImagesByItem(ctx context.Context, itemID sql.NullInt32) ([]ItemImage, error) {
	rows, err := q.db.QueryContext(ctx, getItemImagesByItem, itemID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ItemImage{}
	for rows.Next() {
		var i ItemImage
		if err := rows.Scan(
			&i.ID,
			&i.ItemID,
			&i.VariationID,
			&i.Url,
			&i.IsPrimary,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getItemImagesByVariation = `-- name: GetItemImagesByVariation :many
SELECT id, item_id, variation_id, url, is_primary, created_at FROM item_image WHERE variation_id = $1
`

func (q *Queries) GetItemImagesByVariation(ctx context.Context, variationID sql.NullInt32) ([]ItemImage, error) {
	rows, err := q.db.QueryContext(ctx, getItemImagesByVariation, variationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ItemImage{}
	for rows.Next() {
		var i ItemImage
		if err := rows.Scan(
			&i.ID,
			&i.ItemID,
			&i.VariationID,
			&i.Url,
			&i.IsPrimary,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUnitByID = `-- name: GetUnitByID :one
SELECT id, name, short_code, created_at, updated_at FROM unit
WHERE id = $1
`

func (q *Queries) GetUnitByID(ctx context.Context, id int32) (Unit, error) {
	row := q.db.QueryRowContext(ctx, getUnitByID, id)
	var i Unit
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ShortCode,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getVariation = `-- name: GetVariation :one
SELECT id, item_id, sku, name, unit_id, size, color_id, barcode, base_price, reorder_level, is_default, is_active, created_at, updated_at FROM variation WHERE id = $1 LIMIT 1
`

func (q *Queries) GetVariation(ctx context.Context, id int32) (Variation, error) {
	row := q.db.QueryRowContext(ctx, getVariation, id)
	var i Variation
	err := row.Scan(
		&i.ID,
		&i.ItemID,
		&i.Sku,
		&i.Name,
		&i.UnitID,
		&i.Size,
		&i.ColorID,
		&i.Barcode,
		&i.BasePrice,
		&i.ReorderLevel,
		&i.IsDefault,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listBrands = `-- name: ListBrands :many
SELECT id, name, description, logo, is_active, created_at, updated_at FROM brand ORDER BY name
`

func (q *Queries) ListBrands(ctx context.Context) ([]Brand, error) {
	rows, err := q.db.QueryContext(ctx, listBrands)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Brand{}
	for rows.Next() {
		var i Brand
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Logo,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCategories = `-- name: ListCategories :many
SELECT id, name, parent_id, description, is_active, created_at, updated_at FROM category ORDER BY name
`

func (q *Queries) ListCategories(ctx context.Context) ([]Category, error) {
	rows, err := q.db.QueryContext(ctx, listCategories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Category{}
	for rows.Next() {
		var i Category
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.ParentID,
			&i.Description,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listColors = `-- name: ListColors :many
SELECT id, name, created_at, updated_at FROM color
ORDER BY id
`

func (q *Queries) ListColors(ctx context.Context) ([]Color, error) {
	rows, err := q.db.QueryContext(ctx, listColors)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Color{}
	for rows.Next() {
		var i Color
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listItems = `-- name: ListItems :many
SELECT id, brand_id, category_id, name, description, item_type, is_active, no_variants, created_at, updated_at FROM item ORDER BY name
`

func (q *Queries) ListItems(ctx context.Context) ([]Item, error) {
	rows, err := q.db.QueryContext(ctx, listItems)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Item{}
	for rows.Next() {
		var i Item
		if err := rows.Scan(
			&i.ID,
			&i.BrandID,
			&i.CategoryID,
			&i.Name,
			&i.Description,
			&i.ItemType,
			&i.IsActive,
			&i.NoVariants,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listItemsByCategory = `-- name: ListItemsByCategory :many
SELECT id, brand_id, category_id, name, description, item_type, is_active, no_variants, created_at, updated_at FROM item WHERE category_id = $1 ORDER BY name
`

func (q *Queries) ListItemsByCategory(ctx context.Context, categoryID int32) ([]Item, error) {
	rows, err := q.db.QueryContext(ctx, listItemsByCategory, categoryID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Item{}
	for rows.Next() {
		var i Item
		if err := rows.Scan(
			&i.ID,
			&i.BrandID,
			&i.CategoryID,
			&i.Name,
			&i.Description,
			&i.ItemType,
			&i.IsActive,
			&i.NoVariants,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUnits = `-- name: ListUnits :many
SELECT id, name, short_code, created_at, updated_at FROM unit
ORDER BY id
`

func (q *Queries) ListUnits(ctx context.Context) ([]Unit, error) {
	rows, err := q.db.QueryContext(ctx, listUnits)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Unit{}
	for rows.Next() {
		var i Unit
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.ShortCode,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listVariationsByItem = `-- name: ListVariationsByItem :many
SELECT id, item_id, sku, name, unit_id, size, color_id, barcode, base_price, reorder_level, is_default, is_active, created_at, updated_at FROM variation WHERE item_id = $1 ORDER BY name
`

func (q *Queries) ListVariationsByItem(ctx context.Context, itemID int32) ([]Variation, error) {
	rows, err := q.db.QueryContext(ctx, listVariationsByItem, itemID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Variation{}
	for rows.Next() {
		var i Variation
		if err := rows.Scan(
			&i.ID,
			&i.ItemID,
			&i.Sku,
			&i.Name,
			&i.UnitID,
			&i.Size,
			&i.ColorID,
			&i.Barcode,
			&i.BasePrice,
			&i.ReorderLevel,
			&i.IsDefault,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBrand = `-- name: UpdateBrand :one
UPDATE brand
SET name = $2,
    description = $3,
    logo = $4,
    is_active = $5,
    updated_at = NOW()
WHERE id = $1
RETURNING id, name, description, logo, is_active, created_at, updated_at
`

type UpdateBrandParams struct {
	ID          int32          `json:"id"`
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
	Logo        sql.NullString `json:"logo"`
	IsActive    sql.NullBool   `json:"is_active"`
}

func (q *Queries) UpdateBrand(ctx context.Context, arg UpdateBrandParams) (Brand, error) {
	row := q.db.QueryRowContext(ctx, updateBrand,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Logo,
		arg.IsActive,
	)
	var i Brand
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Logo,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateCategory = `-- name: UpdateCategory :one
UPDATE category
SET name = $2,
    parent_id = $3,
    description = $4,
    is_active = $5,
    updated_at = NOW()
WHERE id = $1
RETURNING id, name, parent_id, description, is_active, created_at, updated_at
`

type UpdateCategoryParams struct {
	ID          int32          `json:"id"`
	Name        string         `json:"name"`
	ParentID    sql.NullInt32  `json:"parent_id"`
	Description sql.NullString `json:"description"`
	IsActive    sql.NullBool   `json:"is_active"`
}

func (q *Queries) UpdateCategory(ctx context.Context, arg UpdateCategoryParams) (Category, error) {
	row := q.db.QueryRowContext(ctx, updateCategory,
		arg.ID,
		arg.Name,
		arg.ParentID,
		arg.Description,
		arg.IsActive,
	)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ParentID,
		&i.Description,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateColor = `-- name: UpdateColor :one
UPDATE color
SET name = $1,
    updated_at = CURRENT_TIMESTAMP
WHERE id = $2
RETURNING id, name, created_at, updated_at
`

type UpdateColorParams struct {
	Name string `json:"name"`
	ID   int32  `json:"id"`
}

func (q *Queries) UpdateColor(ctx context.Context, arg UpdateColorParams) (Color, error) {
	row := q.db.QueryRowContext(ctx, updateColor, arg.Name, arg.ID)
	var i Color
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateInventoryQuantity = `-- name: UpdateInventoryQuantity :one
UPDATE inventory
SET quantity = $3,
    last_updated = NOW()
WHERE store_id = $1 AND variation_id = $2
RETURNING id, store_id, variation_id, quantity, last_updated
`

type UpdateInventoryQuantityParams struct {
	StoreID     int32 `json:"store_id"`
	VariationID int32 `json:"variation_id"`
	Quantity    int32 `json:"quantity"`
}

func (q *Queries) UpdateInventoryQuantity(ctx context.Context, arg UpdateInventoryQuantityParams) (Inventory, error) {
	row := q.db.QueryRowContext(ctx, updateInventoryQuantity, arg.StoreID, arg.VariationID, arg.Quantity)
	var i Inventory
	err := row.Scan(
		&i.ID,
		&i.StoreID,
		&i.VariationID,
		&i.Quantity,
		&i.LastUpdated,
	)
	return i, err
}

const updateItem = `-- name: UpdateItem :one
UPDATE item
SET brand_id = $2,
    category_id = $3,
    name = $4,
    description = $5,
    item_type = $6,
    no_variants = $7,
    is_active = $8,
    updated_at = NOW()
WHERE id = $1
RETURNING id, brand_id, category_id, name, description, item_type, is_active, no_variants, created_at, updated_at
`

type UpdateItemParams struct {
	ID          int32          `json:"id"`
	BrandID     sql.NullInt32  `json:"brand_id"`
	CategoryID  int32          `json:"category_id"`
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
	ItemType    string         `json:"item_type"`
	NoVariants  sql.NullBool   `json:"no_variants"`
	IsActive    sql.NullBool   `json:"is_active"`
}

func (q *Queries) UpdateItem(ctx context.Context, arg UpdateItemParams) (Item, error) {
	row := q.db.QueryRowContext(ctx, updateItem,
		arg.ID,
		arg.BrandID,
		arg.CategoryID,
		arg.Name,
		arg.Description,
		arg.ItemType,
		arg.NoVariants,
		arg.IsActive,
	)
	var i Item
	err := row.Scan(
		&i.ID,
		&i.BrandID,
		&i.CategoryID,
		&i.Name,
		&i.Description,
		&i.ItemType,
		&i.IsActive,
		&i.NoVariants,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUnit = `-- name: UpdateUnit :one
UPDATE unit
SET name = $1,
    short_code = $2,
    updated_at = CURRENT_TIMESTAMP
WHERE id = $3
RETURNING id, name, short_code, created_at, updated_at
`

type UpdateUnitParams struct {
	Name      string         `json:"name"`
	ShortCode sql.NullString `json:"short_code"`
	ID        int32          `json:"id"`
}

func (q *Queries) UpdateUnit(ctx context.Context, arg UpdateUnitParams) (Unit, error) {
	row := q.db.QueryRowContext(ctx, updateUnit, arg.Name, arg.ShortCode, arg.ID)
	var i Unit
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ShortCode,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateVariation = `-- name: UpdateVariation :one
UPDATE variation
SET sku = $2,
    name = $3,
    unit_id = $4,
    size = $5,
    color_id = $6,
    barcode = $7,
    base_price = $8,
    reorder_level = $9,
    is_default = $10,
    is_active = $11,
    updated_at = NOW()
WHERE id = $1
RETURNING id, item_id, sku, name, unit_id, size, color_id, barcode, base_price, reorder_level, is_default, is_active, created_at, updated_at
`

type UpdateVariationParams struct {
	ID           int32          `json:"id"`
	Sku          string         `json:"sku"`
	Name         string         `json:"name"`
	UnitID       int32          `json:"unit_id"`
	Size         sql.NullString `json:"size"`
	ColorID      sql.NullInt32  `json:"color_id"`
	Barcode      sql.NullString `json:"barcode"`
	BasePrice    string         `json:"base_price"`
	ReorderLevel sql.NullInt32  `json:"reorder_level"`
	IsDefault    sql.NullBool   `json:"is_default"`
	IsActive     sql.NullBool   `json:"is_active"`
}

func (q *Queries) UpdateVariation(ctx context.Context, arg UpdateVariationParams) (Variation, error) {
	row := q.db.QueryRowContext(ctx, updateVariation,
		arg.ID,
		arg.Sku,
		arg.Name,
		arg.UnitID,
		arg.Size,
		arg.ColorID,
		arg.Barcode,
		arg.BasePrice,
		arg.ReorderLevel,
		arg.IsDefault,
		arg.IsActive,
	)
	var i Variation
	err := row.Scan(
		&i.ID,
		&i.ItemID,
		&i.Sku,
		&i.Name,
		&i.UnitID,
		&i.Size,
		&i.ColorID,
		&i.Barcode,
		&i.BasePrice,
		&i.ReorderLevel,
		&i.IsDefault,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const upsertInventory = `-- name: UpsertInventory :one
INSERT INTO inventory (store_id, variation_id, quantity)
VALUES ($1, $2, $3)
ON CONFLICT (store_id, variation_id)
DO UPDATE SET
    quantity = EXCLUDED.quantity,
    last_updated = NOW()
RETURNING id, store_id, variation_id, quantity, last_updated
`

type UpsertInventoryParams struct {
	StoreID     int32 `json:"store_id"`
	VariationID int32 `json:"variation_id"`
	Quantity    int32 `json:"quantity"`
}

// Inventory
func (q *Queries) UpsertInventory(ctx context.Context, arg UpsertInventoryParams) (Inventory, error) {
	row := q.db.QueryRowContext(ctx, upsertInventory, arg.StoreID, arg.VariationID, arg.Quantity)
	var i Inventory
	err := row.Scan(
		&i.ID,
		&i.StoreID,
		&i.VariationID,
		&i.Quantity,
		&i.LastUpdated,
	)
	return i, err
}
